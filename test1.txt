import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class ReadExcelFile {

    public static void main(String[] args) {
        String excelFilePath = "path/to/your/excel/file.xlsx"; // Replace with your file path
        try {
            List<List<String>> data = readExcelData(excelFilePath);
            if (data != null) {
                printData(data);
            } else {
                System.out.println("Error: No data read from the Excel file or file not found.");
            }
        } catch (IOException e) {
            System.err.println("Error reading Excel file: " + e.getMessage());
        }
    }

    /**
     * Reads data from an Excel file.
     *
     * @param excelFilePath The path to the Excel file.
     * @return A list of lists, where each inner list represents a row of data from the Excel file,
     * or null if an error occurs or the file is empty.
     * @throws IOException If an error occurs while reading the file.
     */
    public static List<List<String>> readExcelData(String excelFilePath) throws IOException {
        List<List<String>> data = new ArrayList<>();
        FileInputStream fileInputStream = null;
        Workbook workbook = null;

        try {
            // 1. Get the file input stream
            File excelFile = new File(excelFilePath);
            if (!excelFile.exists()) {
                System.out.println("Error: File not found at path: " + excelFilePath);
                return null; // Explicitly return null for file not found
            }
            fileInputStream = new FileInputStream(excelFile);

            // 2. Create workbook instance based on file type
            if (excelFilePath.endsWith(".xlsx")) {
                workbook = new XSSFWorkbook(fileInputStream);
            } else if (excelFilePath.endsWith(".xls")) {
                //Use this block for .xls files.
                workbook = new org.apache.poi.hssf.usermodel.HSSFWorkbook(fileInputStream);
            } else {
                System.out.println("Error: Unsupported file format. Only .xlsx and .xls are supported.");
                return null;
            }

            // 3. Get the first sheet
            Sheet sheet = workbook.getSheetAt(0);
            if (sheet == null) {
                System.out.println("Error: Sheet is null.  The workbook may be empty.");
                return null;
            }

            // 4. Iterate through rows
            for (Row row : sheet) {
                if (row == null) {
                    continue; // Handle null rows
                }
                List<String> rowData = new ArrayList<>();
                // 5. Iterate through cells
                for (Cell cell : row) {
                    String cellValue = getCellValueAsString(cell);
                    rowData.add(cellValue);
                }
                data.add(rowData);
            }
        } catch (IOException e) {
             System.err.println("Error during file processing: " + e.getMessage());
             throw e; // Re-throw the exception to be caught by the caller.
        } finally {
            // 6. Close workbook and stream
            if (workbook != null) {
                try {
                    workbook.close();
                } catch (IOException e) {
                    System.err.println("Error closing workbook: " + e.getMessage());
                    // Consider logging this error, but don't throw it, as the main error might be more important.
                }
            }
            if (fileInputStream != null) {
                try {
                    fileInputStream.close();
                } catch (IOException e) {
                    System.err.println("Error closing fileInputStream: " + e.getMessage());
                    // Consider logging this error.
                }
            }
        }
        return data;
    }

    /**
     * Helper method to get cell value as string, handling different cell types.
     * @param cell The cell to get the value from.
     * @return The cell value as a string.  Returns an empty string for null cells.
     */
    private static String getCellValueAsString(Cell cell) {
        if (cell == null) {
            return "";
        }
        CellType cellType = cell.getCellType();
        switch (cellType) {
            case STRING:
                return cell.getStringCellValue();
            case NUMERIC:
                if (DateUtil.isCellDateFormatted(cell)) {
                    return cell.getDateCellValue().toString();
                } else {
                    return String.valueOf(cell.getNumericCellValue());
                }
            case BOOLEAN:
                return String.valueOf(cell.getBooleanCellValue());
            case FORMULA:
                return cell.getCellFormula();
            case BLANK:
                return "";
            default:
                return "";
        }
    }

    /**
     * Prints the data read from the Excel file to the console.
     *
     * @param data The list of lists representing the data.
     */
    public static void printData(List<List<String>> data) {
        for (List<String> row : data) {
            for (String cellValue : row) {
                System.out.print(cellValue + "\t");
            }
            System.out.println();
        }
    }
}

